// ==UserScript==
// @name           Govno 3 aka penochka
// @version	 
// @description    Govno. Rewrited.
// @include        http://2-ch.ru/*
// @include        http://*.2-ch.ru/*
// @exclude        */src/*
// ==/UserScript==
hex = [
	'data:text/javascript;base64,',
	'data:text/javascript;base64,LyoqCiAqIENvb2tpZSBwbHVnaW4KICoKICogQ29weXJpZ2h0IChjKSAyMDA2IEtsYXVzIEhhcnRsIChzdGlsYnVlcm8uZGUpCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKiBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLmh0bWwKICoKICovCgovKioKICogQ3JlYXRlIGEgY29va2llIHdpdGggdGhlIGdpdmVuIG5hbWUgYW5kIHZhbHVlIGFuZCBvdGhlciBvcHRpb25hbCBwYXJhbWV0ZXJzLgogKgogKiBAZXhhbXBsZSAkLmNvb2tpZSgndGhlX2Nvb2tpZScsICd0aGVfdmFsdWUnKTsKICogQGRlc2MgU2V0IHRoZSB2YWx1ZSBvZiBhIGNvb2tpZS4KICogQGV4YW1wbGUgJC5jb29raWUoJ3RoZV9jb29raWUnLCAndGhlX3ZhbHVlJywgeyBleHBpcmVzOiA3LCBwYXRoOiAnLycsIGRvbWFpbjogJ2pxdWVyeS5jb20nLCBzZWN1cmU6IHRydWUgfSk7CiAqIEBkZXNjIENyZWF0ZSBhIGNvb2tpZSB3aXRoIGFsbCBhdmFpbGFibGUgb3B0aW9ucy4KICogQGV4YW1wbGUgJC5jb29raWUoJ3RoZV9jb29raWUnLCAndGhlX3ZhbHVlJyk7CiAqIEBkZXNjIENyZWF0ZSBhIHNlc3Npb24gY29va2llLgogKiBAZXhhbXBsZSAkLmNvb2tpZSgndGhlX2Nvb2tpZScsIG51bGwpOwogKiBAZGVzYyBEZWxldGUgYSBjb29raWUgYnkgcGFzc2luZyBudWxsIGFzIHZhbHVlLiBLZWVwIGluIG1pbmQgdGhhdCB5b3UgaGF2ZSB0byB1c2UgdGhlIHNhbWUgcGF0aCBhbmQgZG9tYWluCiAqICAgICAgIHVzZWQgd2hlbiB0aGUgY29va2llIHdhcyBzZXQuCiAqCiAqIEBwYXJhbSBTdHJpbmcgbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29va2llLgogKiBAcGFyYW0gU3RyaW5nIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgY29va2llLgogKiBAcGFyYW0gT2JqZWN0IG9wdGlvbnMgQW4gb2JqZWN0IGxpdGVyYWwgY29udGFpbmluZyBrZXkvdmFsdWUgcGFpcnMgdG8gcHJvdmlkZSBvcHRpb25hbCBjb29raWUgYXR0cmlidXRlcy4KICogQG9wdGlvbiBOdW1iZXJ8RGF0ZSBleHBpcmVzIEVpdGhlciBhbiBpbnRlZ2VyIHNwZWNpZnlpbmcgdGhlIGV4cGlyYXRpb24gZGF0ZSBmcm9tIG5vdyBvbiBpbiBkYXlzIG9yIGEgRGF0ZSBvYmplY3QuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBhIG5lZ2F0aXZlIHZhbHVlIGlzIHNwZWNpZmllZCAoZS5nLiBhIGRhdGUgaW4gdGhlIHBhc3QpLCB0aGUgY29va2llIHdpbGwgYmUgZGVsZXRlZC4KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHNldCB0byBudWxsIG9yIG9taXR0ZWQsIHRoZSBjb29raWUgd2lsbCBiZSBhIHNlc3Npb24gY29va2llIGFuZCB3aWxsIG5vdCBiZSByZXRhaW5lZAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgdGhlIGJyb3dzZXIgZXhpdHMuCiAqIEBvcHRpb24gU3RyaW5nIHBhdGggVGhlIHZhbHVlIG9mIHRoZSBwYXRoIGF0cmlidXRlIG9mIHRoZSBjb29raWUgKGRlZmF1bHQ6IHBhdGggb2YgcGFnZSB0aGF0IGNyZWF0ZWQgdGhlIGNvb2tpZSkuCiAqIEBvcHRpb24gU3RyaW5nIGRvbWFpbiBUaGUgdmFsdWUgb2YgdGhlIGRvbWFpbiBhdHRyaWJ1dGUgb2YgdGhlIGNvb2tpZSAoZGVmYXVsdDogZG9tYWluIG9mIHBhZ2UgdGhhdCBjcmVhdGVkIHRoZSBjb29raWUpLgogKiBAb3B0aW9uIEJvb2xlYW4gc2VjdXJlIElmIHRydWUsIHRoZSBzZWN1cmUgYXR0cmlidXRlIG9mIHRoZSBjb29raWUgd2lsbCBiZSBzZXQgYW5kIHRoZSBjb29raWUgdHJhbnNtaXNzaW9uIHdpbGwKICogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlIGEgc2VjdXJlIHByb3RvY29sIChsaWtlIEhUVFBTKS4KICogQHR5cGUgdW5kZWZpbmVkCiAqCiAqIEBuYW1lICQuY29va2llCiAqIEBjYXQgUGx1Z2lucy9Db29raWUKICogQGF1dGhvciBLbGF1cyBIYXJ0bC9rbGF1cy5oYXJ0bEBzdGlsYnVlcm8uZGUKICovCgovKioKICogR2V0IHRoZSB2YWx1ZSBvZiBhIGNvb2tpZSB3aXRoIHRoZSBnaXZlbiBuYW1lLgogKgogKiBAZXhhbXBsZSAkLmNvb2tpZSgndGhlX2Nvb2tpZScpOwogKiBAZGVzYyBHZXQgdGhlIHZhbHVlIG9mIGEgY29va2llLgogKgogKiBAcGFyYW0gU3RyaW5nIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvb2tpZS4KICogQHJldHVybiBUaGUgdmFsdWUgb2YgdGhlIGNvb2tpZS4KICogQHR5cGUgU3RyaW5nCiAqCiAqIEBuYW1lICQuY29va2llCiAqIEBjYXQgUGx1Z2lucy9Db29raWUKICogQGF1dGhvciBLbGF1cyBIYXJ0bC9rbGF1cy5oYXJ0bEBzdGlsYnVlcm8uZGUKICovCmpRdWVyeS5jb29raWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3B0aW9ucykgewogICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAndW5kZWZpbmVkJykgeyAvLyBuYW1lIGFuZCB2YWx1ZSBnaXZlbiwgc2V0IGNvb2tpZQogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgewogICAgICAgICAgICB2YWx1ZSA9ICcnOwogICAgICAgICAgICBvcHRpb25zLmV4cGlyZXMgPSAtMTsKICAgICAgICB9CiAgICAgICAgdmFyIGV4cGlyZXMgPSAnJzsKICAgICAgICBpZiAob3B0aW9ucy5leHBpcmVzICYmICh0eXBlb2Ygb3B0aW9ucy5leHBpcmVzID09ICdudW1iZXInIHx8IG9wdGlvbnMuZXhwaXJlcy50b1VUQ1N0cmluZykpIHsKICAgICAgICAgICAgdmFyIGRhdGU7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5leHBpcmVzID09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIChvcHRpb25zLmV4cGlyZXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkYXRlID0gb3B0aW9ucy5leHBpcmVzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV4cGlyZXMgPSAnOyBleHBpcmVzPScgKyBkYXRlLnRvVVRDU3RyaW5nKCk7IC8vIHVzZSBleHBpcmVzIGF0dHJpYnV0ZSwgbWF4LWFnZSBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFCiAgICAgICAgfQogICAgICAgIC8vIENBVVRJT046IE5lZWRlZCB0byBwYXJlbnRoZXNpemUgb3B0aW9ucy5wYXRoIGFuZCBvcHRpb25zLmRvbWFpbgogICAgICAgIC8vIGluIHRoZSBmb2xsb3dpbmcgZXhwcmVzc2lvbnMsIG90aGVyd2lzZSB0aGV5IGV2YWx1YXRlIHRvIHVuZGVmaW5lZAogICAgICAgIC8vIGluIHRoZSBwYWNrZWQgdmVyc2lvbiBmb3Igc29tZSByZWFzb24uLi4KICAgICAgICB2YXIgcGF0aCA9IG9wdGlvbnMucGF0aCA/ICc7IHBhdGg9JyArIChvcHRpb25zLnBhdGgpIDogJyc7CiAgICAgICAgdmFyIGRvbWFpbiA9IG9wdGlvbnMuZG9tYWluID8gJzsgZG9tYWluPScgKyAob3B0aW9ucy5kb21haW4pIDogJyc7CiAgICAgICAgdmFyIHNlY3VyZSA9IG9wdGlvbnMuc2VjdXJlID8gJzsgc2VjdXJlJyA6ICcnOwogICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IFtuYW1lLCAnPScsIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSksIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlXS5qb2luKCcnKTsKICAgIH0gZWxzZSB7IC8vIG9ubHkgbmFtZSBnaXZlbiwgZ2V0IGNvb2tpZQogICAgICAgIHZhciBjb29raWVWYWx1ZSA9IG51bGw7CiAgICAgICAgaWYgKGRvY3VtZW50LmNvb2tpZSAmJiBkb2N1bWVudC5jb29raWUgIT0gJycpIHsKICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgY29va2llID0galF1ZXJ5LnRyaW0oY29va2llc1tpXSk7CiAgICAgICAgICAgICAgICAvLyBEb2VzIHRoaXMgY29va2llIHN0cmluZyBiZWdpbiB3aXRoIHRoZSBuYW1lIHdlIHdhbnQ/CiAgICAgICAgICAgICAgICBpZiAoY29va2llLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCArIDEpID09IChuYW1lICsgJz0nKSkgewogICAgICAgICAgICAgICAgICAgIGNvb2tpZVZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyAxKSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvb2tpZVZhbHVlOwogICAgfQp9Ow==',
	'data:text/javascript;base64,CihmdW5jdGlvbigkKXtmdW5jdGlvbiB0b0ludGVnZXJzQXRMZWFzZShuKQp7cmV0dXJuIG48MTA/JzAnK246bjt9CkRhdGUucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbihkYXRlKQp7cmV0dXJuIHRoaXMuZ2V0VVRDRnVsbFllYXIoKSsnLScrCnRvSW50ZWdlcnNBdExlYXNlKHRoaXMuZ2V0VVRDTW9udGgoKSkrJy0nKwp0b0ludGVnZXJzQXRMZWFzZSh0aGlzLmdldFVUQ0RhdGUoKSk7fTt2YXIgZXNjYXBlYWJsZT0vWyJcXFx4MDAtXHgxZlx4N2YtXHg5Zl0vZzt2YXIgbWV0YT17J1xiJzonXFxiJywnXHQnOidcXHQnLCdcbic6J1xcbicsJ1xmJzonXFxmJywnXHInOidcXHInLCciJzonXFwiJywnXFwnOidcXFxcJ307JC5xdW90ZVN0cmluZz1mdW5jdGlvbihzdHJpbmcpCntpZihlc2NhcGVhYmxlLnRlc3Qoc3RyaW5nKSkKe3JldHVybiciJytzdHJpbmcucmVwbGFjZShlc2NhcGVhYmxlLGZ1bmN0aW9uKGEpCnt2YXIgYz1tZXRhW2FdO2lmKHR5cGVvZiBjPT09J3N0cmluZycpe3JldHVybiBjO30KYz1hLmNoYXJDb2RlQXQoKTtyZXR1cm4nXFx1MDAnK01hdGguZmxvb3IoYy8xNikudG9TdHJpbmcoMTYpKyhjJTE2KS50b1N0cmluZygxNik7fSkrJyInO30KcmV0dXJuJyInK3N0cmluZysnIic7fTskLnRvSlNPTj1mdW5jdGlvbihvLGNvbXBhY3QpCnt2YXIgdHlwZT10eXBlb2Yobyk7aWYodHlwZT09InVuZGVmaW5lZCIpCnJldHVybiJ1bmRlZmluZWQiO2Vsc2UgaWYodHlwZT09Im51bWJlciJ8fHR5cGU9PSJib29sZWFuIikKcmV0dXJuIG8rIiI7ZWxzZSBpZihvPT09bnVsbCkKcmV0dXJuIm51bGwiO2lmKHR5cGU9PSJzdHJpbmciKQp7cmV0dXJuICQucXVvdGVTdHJpbmcobyk7fQppZih0eXBlPT0ib2JqZWN0IiYmdHlwZW9mIG8udG9KU09OPT0iZnVuY3Rpb24iKQpyZXR1cm4gby50b0pTT04oY29tcGFjdCk7aWYodHlwZSE9ImZ1bmN0aW9uIiYmdHlwZW9mKG8ubGVuZ3RoKT09Im51bWJlciIpCnt2YXIgcmV0PVtdO2Zvcih2YXIgaT0wO2k8by5sZW5ndGg7aSsrKXtyZXQucHVzaCgkLnRvSlNPTihvW2ldLGNvbXBhY3QpKTt9CmlmKGNvbXBhY3QpCnJldHVybiJbIityZXQuam9pbigiLCIpKyJdIjtlbHNlCnJldHVybiJbIityZXQuam9pbigiLCAiKSsiXSI7fQppZih0eXBlPT0iZnVuY3Rpb24iKXt0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmFibGUgdG8gY29udmVydCBvYmplY3Qgb2YgdHlwZSAnZnVuY3Rpb24nIHRvIGpzb24uIik7fQp2YXIgcmV0PVtdO2Zvcih2YXIgayBpbiBvKXt2YXIgbmFtZTt0eXBlPXR5cGVvZihrKTtpZih0eXBlPT0ibnVtYmVyIikKbmFtZT0nIicraysnIic7ZWxzZSBpZih0eXBlPT0ic3RyaW5nIikKbmFtZT0kLnF1b3RlU3RyaW5nKGspO2Vsc2UKY29udGludWU7dmFyIHZhbD0kLnRvSlNPTihvW2tdLGNvbXBhY3QpO2lmKHR5cGVvZih2YWwpIT0ic3RyaW5nIil7Y29udGludWU7fQppZihjb21wYWN0KQpyZXQucHVzaChuYW1lKyI6Iit2YWwpO2Vsc2UKcmV0LnB1c2gobmFtZSsiOiAiK3ZhbCk7fQpyZXR1cm4ieyIrcmV0LmpvaW4oIiwgIikrIn0iO307JC5jb21wYWN0SlNPTj1mdW5jdGlvbihvKQp7cmV0dXJuICQudG9KU09OKG8sdHJ1ZSk7fTskLmV2YWxKU09OPWZ1bmN0aW9uKHNyYykKe3JldHVybiBldmFsKCIoIitzcmMrIikiKTt9OyQuc2VjdXJlRXZhbEpTT049ZnVuY3Rpb24oc3JjKQp7dmFyIGZpbHRlcmVkPXNyYztmaWx0ZXJlZD1maWx0ZXJlZC5yZXBsYWNlKC9cXFsiXFxcL2JmbnJ0dV0vZywnQCcpO2ZpbHRlcmVkPWZpbHRlcmVkLnJlcGxhY2UoLyJbXiJcXFxuXHJdKiJ8dHJ1ZXxmYWxzZXxudWxsfC0/XGQrKD86XC5cZCopPyg/OltlRV1bK1wtXT9cZCspPy9nLCddJyk7ZmlsdGVyZWQ9ZmlsdGVyZWQucmVwbGFjZSgvKD86Xnw6fCwpKD86XHMqXFspKy9nLCcnKTtpZigvXltcXSw6e31cc10qJC8udGVzdChmaWx0ZXJlZCkpCnJldHVybiBldmFsKCIoIitzcmMrIikiKTtlbHNlCnRocm93IG5ldyBTeW50YXhFcnJvcigiRXJyb3IgcGFyc2luZyBKU09OLCBzb3VyY2UgaXMgbm90IHZhbGlkLiIpO307fSkoalF1ZXJ5KTs=',
	'data:text/javascript;base64,',
	'data:text/javascript;base64,',
	'data:text/javascript;base64,',
''];h=document.getElementsByTagName('head')[0];var e;for(var i in hex){e=document.createElement('script');e.type='text/javascript';e.src=hex[i];h.appendChild(e);}
